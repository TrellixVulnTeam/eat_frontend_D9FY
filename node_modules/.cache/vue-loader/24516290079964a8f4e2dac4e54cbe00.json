{"remainingRequest":"C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\src\\pages\\meal-add.vue?vue&type=template&id=ca59eeca&","dependencies":[{"path":"C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\src\\pages\\meal-add.vue","mtime":1627235850702},{"path":"C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626260724928},{"path":"C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1626260778620},{"path":"C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626260724928},{"path":"C:\\Users\\shani.VOICESENSE\\Documents\\CodingAcademy\\Ex-Submissions\\Shani Herzinger\\eat-with\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1626260778614}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}